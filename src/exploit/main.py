import files
import os
import sys

import numpy
import pandas
from sklearn.ensemble import RandomForestClassifier

import clustering

if len(sys.argv) != 2:
    print("Command requires one argument, the data directory")
    exit(1)

data_directory = sys.argv[1]

userdata_path = os.path.join(data_directory, 'input', 'user.json')
picturedata_path = os.path.join(data_directory, 'output', 'data.json')

user_prefs = files.read_user_prefs(userdata_path)
pokemon_data = files.read_pokemon_data(picturedata_path)

pokemons = list(pokemon_data.values())
pokemons = sorted(pokemons, key=lambda x: x['name'])
pokemon_as_cluster = [clustering.pokemon_as_cluster(pokemon) for pokemon in pokemons]

# Build training data
training_data = pokemon_as_cluster[:]
result_data = []
for pokemon in pokemons[:]:
        result_data.append(pokemon['name'] in user_prefs)

# Build dataframes
training_df = pandas.DataFrame(training_data, columns=['color1', 'color2', 'color3'])
result_df = pandas.DataFrame(result_data, columns=['favorite'])

# Train decision tree
dtc = RandomForestClassifier(n_estimators=1, max_depth=10, random_state=0)
dtc = dtc.fit(training_df, result_df.values.ravel())

for x in pokemons[:]:
        if x['name'] in user_prefs:
                continue

        predicted = dtc.predict([
                [
                        x['image']['colors'][0],
                        x['image']['colors'][1],
                        x['image']['colors'][2],
                ]
        ])

        if True in predicted:
                print(x['name'])
