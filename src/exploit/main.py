import os
import sys
import json

import numpy
import pandas
from sklearn.ensemble import RandomForestClassifier

if len(sys.argv) != 2:
    print("Command requires one argument, the data directory")
    exit(1)

def image_as_cluster(image: dict):
    return (
        image['colors'][0],
        image['colors'][1],
        image['colors'][2],
    )

data_directory = sys.argv[1]

userdata_path = os.path.join(data_directory, 'input', 'user.json')
picturedata_path = os.path.join(data_directory, 'output', 'data.json')

with open(userdata_path) as user_file:
        user_prefs = json.load(user_file)

with open(picturedata_path) as image_file:
        images_data = json.load(image_file)

images = sorted(images_data, key=lambda x: x['name'])
images_as_cluster = [image_as_cluster(image) for image in images]

# Build training data
training_data = images_as_cluster
result_data = [(image['name'] in user_prefs) for image in images]

# Build dataframes
training_df = pandas.DataFrame(training_data, columns=['color1', 'color2', 'color3'])
result_df = pandas.DataFrame(result_data, columns=['favorite'])

# Train decision tree
classifier = RandomForestClassifier(n_estimators=2, max_depth=10)
classifier = classifier.fit(training_df, result_df.values.ravel())

for x in images[:]:
        if x['name'] in user_prefs:
                continue

        predicted = classifier.predict([
                [
                        x['colors'][0],
                        x['colors'][1],
                        x['colors'][2],
                ]
        ])

        if True in predicted:
                print(x['name'])
